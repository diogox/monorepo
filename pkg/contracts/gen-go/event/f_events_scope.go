// Autogenerated by Frugal Compiler (3.14.13)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package event

import (
	"fmt"

	frugal "github.com/Workiva/frugal/lib/go"
	"github.com/apache/thrift/lib/go/thrift"
)

type EventsPublisher interface {
	Open() error
	Close() error
	PublishEventCreated(fctx frugal.FContext, req *Event) error
}

type eventsPublisher struct {
	client  frugal.FClient
	methods map[string]*frugal.Method
}

func NewEventsPublisher(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) EventsPublisher {
	publisher := &eventsPublisher{
		client:  frugal.NewFScopeClient(provider),
		methods: make(map[string]*frugal.Method),
	}
	middleware = append(middleware, provider.GetMiddleware()...)
	publisher.methods["publishEventCreated"] = frugal.NewMethod(publisher, publisher.publishEventCreated, "publishEventCreated", middleware)
	return publisher
}

func (p eventsPublisher) Open() error  { return p.client.Open() }
func (p eventsPublisher) Close() error { return p.client.Close() }

func (p *eventsPublisher) PublishEventCreated(fctx frugal.FContext, req *Event) error {
	ret := p.methods["publishEventCreated"].Invoke([]interface{}{fctx, req})
	if ret[0] != nil {
		return ret[0].(error)
	}
	return nil
}

func (p *eventsPublisher) publishEventCreated(fctx frugal.FContext, req *Event) error {
	prefix := ""
	op := "EventCreated"
	topic := fmt.Sprintf("%sEvents.%s", prefix, op)
	return p.client.Publish(fctx, op, topic, req)
}

type EventsSubscriber interface {
	SubscribeEventCreated(handler func(frugal.FContext, *Event)) (*frugal.FSubscription, error)
}

type EventsErrorableSubscriber interface {
	SubscribeEventCreatedErrorable(handler func(frugal.FContext, *Event) error) (*frugal.FSubscription, error)
}

type eventsSubscriber struct {
	provider   *frugal.FScopeProvider
	middleware []frugal.ServiceMiddleware
}

func NewEventsSubscriber(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) EventsSubscriber {
	middleware = append(middleware, provider.GetMiddleware()...)
	return &eventsSubscriber{provider: provider, middleware: middleware}
}

func NewEventsErrorableSubscriber(provider *frugal.FScopeProvider, middleware ...frugal.ServiceMiddleware) EventsErrorableSubscriber {
	middleware = append(middleware, provider.GetMiddleware()...)
	return &eventsSubscriber{provider: provider, middleware: middleware}
}

func (l *eventsSubscriber) SubscribeEventCreated(handler func(frugal.FContext, *Event)) (*frugal.FSubscription, error) {
	return l.SubscribeEventCreatedErrorable(func(fctx frugal.FContext, arg *Event) error {
		handler(fctx, arg)
		return nil
	})
}

func (l *eventsSubscriber) SubscribeEventCreatedErrorable(handler func(frugal.FContext, *Event) error) (*frugal.FSubscription, error) {
	op := "EventCreated"
	prefix := ""
	topic := fmt.Sprintf("%sEvents.%s", prefix, op)
	transport, protocolFactory := l.provider.NewSubscriber()
	cb := l.recvEventCreated(op, protocolFactory, handler)
	if err := transport.Subscribe(topic, cb); err != nil {
		return nil, err
	}

	sub := frugal.NewFSubscription(topic, transport)
	return sub, nil
}

func (l *eventsSubscriber) recvEventCreated(op string, pf *frugal.FProtocolFactory, handler func(frugal.FContext, *Event) error) frugal.FAsyncCallback {
	method := frugal.NewMethod(l, handler, "SubscribeEventCreated", l.middleware)
	return func(transport thrift.TTransport) error {
		iprot := pf.GetProtocol(transport)
		fctx, err := iprot.ReadRequestHeader()
		if err != nil {
			return err
		}

		ctx, cancelFn := frugal.ToContext(fctx)
		defer cancelFn()

		name, _, _, err := iprot.ReadMessageBegin(ctx)
		if err != nil {
			return err
		}

		if name != op {
			iprot.Skip(ctx, thrift.STRUCT)
			iprot.ReadMessageEnd(ctx)
			return thrift.NewTApplicationException(frugal.APPLICATION_EXCEPTION_UNKNOWN_METHOD, "Unknown function"+name)
		}
		req := NewEvent()
		if err := req.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", req), err)
		}
		iprot.ReadMessageEnd(ctx)

		return method.Invoke([]interface{}{fctx, req}).Error()
	}
}
